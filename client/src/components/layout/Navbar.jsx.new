import React, { useState, useEffect, useRef } from 'react';
import { Link, useNavigate, useLocation } from 'react-router-dom';
import { 
  FaSearch, 
  FaUserCircle, 
  FaChevronDown, 
  FaBars, 
  FaTimes,
  FaTachometerAlt,
  FaUser,
  FaHeart,
  FaSignOutAlt,
  FaSignInAlt,
  FaUserPlus,
  FaHome,
  FaBuilding,
  FaHotel,
  FaBlog,
  FaUserCog
} from 'react-icons/fa';
import './Navbar.css';

const Navbar = ({ isAuthenticated = false, user = null, onLogout = () => {} }) => {
  const [isOpen, setIsOpen] = useState(false);
  const [scrolled, setScrolled] = useState(false);
  const [showUserMenu, setShowUserMenu] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [isTransparent, setIsTransparent] = useState(true);
  
  const navigate = useNavigate();
  const location = useLocation();
  const userMenuRef = useRef(null);
  const searchRef = useRef(null);
  const mobileMenuRef = useRef(null);
  const navbarRef = useRef(null);

  // Close menus when clicking outside
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (userMenuRef.current && !userMenuRef.current.contains(event.target)) {
        setShowUserMenu(false);
      }
      if (mobileMenuRef.current && !mobileMenuRef.current.contains(event.target)) {
        setIsOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  // Handle scroll for navbar transparency
  useEffect(() => {
    const handleScroll = () => {
      const isScrolled = window.scrollY > 10;
      if (isScrolled !== scrolled) {
        setScrolled(isScrolled);
      }
      
      // Update transparency based on scroll position
      const atTop = window.scrollY < 100;
      if (atTop !== isTransparent) {
        setIsTransparent(atTop);
      }
    };

    window.addEventListener('scroll', handleScroll);
    handleScroll(); // Initial check
    
    return () => window.removeEventListener('scroll', handleScroll);
  }, [scrolled, isTransparent]);

  // Close mobile menu when route changes
  useEffect(() => {
    setIsOpen(false);
  }, [location.pathname]);

  const toggleMenu = () => {
    setIsOpen(!isOpen);
  };

  const handleSearch = (e) => {
    e.preventDefault();
    if (searchQuery.trim()) {
      navigate(`/search?q=${encodeURIComponent(searchQuery)}`);
      setSearchQuery('');
    }
  };

  const handleLogout = () => {
    onLogout();
    setShowUserMenu(false);
    navigate('/');
  };

  // Get user's first name or email prefix for display
  const displayName = user?.first_name || user?.email?.split('@')[0] || 'Account';

  return (
    <div className="navbar-wrapper">
      <nav 
        ref={navbarRef}
        className={`navbar ${!scrolled && isTransparent ? 'navbar--transparent' : 'navbar--solid'}`}
      >
        <div className="navbar__container">
          {/* Logo */}
          <Link to="/" className="logo" aria-label="Shiats3 Home">
            <span className="logo__icon">üè†</span>
            <span className="logo__text">Shiats3</span>
          </Link>

          {/* Mobile Menu Button */}
          <button 
            className={`navbar__toggle ${isOpen ? 'open' : ''}`}
            onClick={toggleMenu}
            aria-label={isOpen ? 'Close menu' : 'Open menu'}
            aria-expanded={isOpen}
          >
            {isOpen ? <FaTimes /> : <FaBars />}
          </button>

          {/* Desktop Navigation and Search */}
          <div className="navbar__desktop-content">
            {/* Search Bar - Desktop */}
            <div className="navbar__search" ref={searchRef}>
              <form onSubmit={handleSearch} className="search-form">
                <input
                  type="text"
                  placeholder="Search properties, hotels..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="search-input"
                  aria-label="Search"
                />
                <button type="submit" className="search-button" aria-label="Search">
                  <FaSearch />
                </button>
              </form>
            </div>

            {/* Desktop Navigation */}
            <div className="navbar__menu">
              <ul className="navbar__list">
                <li className="navbar__item">
                  <Link 
                    to="/" 
                    className={`navbar__link ${location.pathname === '/' ? 'active' : ''}`}
                  >
                    <FaHome className="navbar__icon" />
                    <span>Home</span>
                  </Link>
                </li>
                <li className="navbar__item">
                  <Link 
                    to="/properties" 
                    className={`navbar__link ${location.pathname.startsWith('/properties') ? 'active' : ''}`}
                  >
                    <FaBuilding className="navbar__icon" />
                    <span>Properties</span>
                  </Link>
                </li>
                <li className="navbar__item">
                  <Link 
                    to="/hotels" 
                    className={`navbar__link ${location.pathname.startsWith('/hotels') ? 'active' : ''}`}
                  >
                    <FaHotel className="navbar__icon" />
                    <span>Hotels</span>
                  </Link>
                </li>
                <li className="navbar__item">
                  <Link 
                    to="/blog" 
                    className={`navbar__link ${location.pathname.startsWith('/blog') ? 'active' : ''}`}
                  >
                    <FaBlog className="navbar__icon" />
                    <span>Blog</span>
                  </Link>
                </li>
              </ul>
            </div>

            {/* User Actions */}
            <div className="navbar__actions">
              {isAuthenticated ? (
                <div className="navbar__user-menu" ref={userMenuRef}>
                  <button 
                    className="navbar__user-button"
                    onClick={() => setShowUserMenu(!showUserMenu)}
                    aria-expanded={showUserMenu}
                    aria-haspopup="true"
                  >
                    <FaUserCircle className="navbar__user-avatar" />
                    <span className="navbar__user-name">
                      {displayName}
                      {user?.last_name && ` ${user.last_name.charAt(0)}.`}
                    </span>
                    <FaChevronDown className={`navbar__dropdown-icon ${showUserMenu ? 'rotate' : ''}`} />
                  </button>
                  
                  {showUserMenu && (
                    <div className="navbar__dropdown">
                      <div className="navbar__dropdown-header">
                        <FaUserCircle className="navbar__dropdown-avatar" />
                        <div>
                          <div className="navbar__dropdown-username">
                            {user?.first_name} {user?.last_name}
                          </div>
                          <div className="navbar__dropdown-email">
                            {user?.email}
                          </div>
                        </div>
                      </div>
                      <div className="navbar__dropdown-divider"></div>
                      <Link 
                        to="/dashboard" 
                        className="navbar__dropdown-item"
                        onClick={() => setShowUserMenu(false)}
                      >
                        <FaTachometerAlt className="navbar__dropdown-icon" />
                        Dashboard
                      </Link>
                      <Link 
                        to="/profile" 
                        className="navbar__dropdown-item"
                        onClick={() => setShowUserMenu(false)}
                      >
                        <FaUser className="navbar__dropdown-icon" />
                        My Profile
                      </Link>
                      <Link 
                        to="/settings" 
                        className="navbar__dropdown-item"
                        onClick={() => setShowUserMenu(false)}
                      >
                        <FaUserCog className="navbar__dropdown-icon" />
                        Settings
                      </Link>
                      <div className="navbar__dropdown-divider"></div>
                      <button 
                        className="navbar__dropdown-item navbar__dropdown-item--danger"
                        onClick={handleLogout}
                      >
                        <FaSignOutAlt className="navbar__dropdown-icon" />
                        Logout
                      </button>
                    </div>
                  )}
                </div>
              ) : (
                <div className="auth-buttons">
                  <Link 
                    to="/login" 
                    className="button button--outline"
                    state={{ from: location.pathname }}
                  >
                    <FaSignInAlt className="button__icon" />
                    <span>Login</span>
                  </Link>
                  <Link 
                    to="/register" 
                    className="button button--primary"
                    state={{ from: location.pathname }}
                  >
                    <FaUserPlus className="button__icon" />
                    <span>Sign Up</span>
                  </Link>
                </div>
              )}
            </div>
          </div>
        </div>

        {/* Mobile Menu Overlay */}
        <div 
          className={`mobile-menu-overlay ${isOpen ? 'mobile-menu-overlay--open' : ''}`}
          onClick={() => setIsOpen(false)}
          aria-hidden={!isOpen}
        ></div>

        {/* Mobile Menu Sidebar */}
        <div 
          ref={mobileMenuRef}
          className={`mobile-menu ${isOpen ? 'mobile-menu--open' : ''}`}
          aria-hidden={!isOpen}
        >
          <div className="mobile-menu__header">
            <h3 className="mobile-menu__title">Menu</h3>
            <button 
              className="mobile-menu__close"
              onClick={() => setIsOpen(false)}
              aria-label="Close menu"
            >
              <FaTimes />
            </button>
          </div>
          
          <div className="mobile-menu__search">
            <form onSubmit={handleSearch} className="search-form">
              <input
                type="text"
                placeholder="Search properties, hotels..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="search-input"
                aria-label="Search"
              />
              <button type="submit" className="search-button" aria-label="Search">
                <FaSearch />
              </button>
            </form>
          </div>
          
          <nav className="mobile-nav">
            <ul className="mobile-nav__list">
              <li className="mobile-nav__item">
                <Link 
                  to="/" 
                  className={`mobile-nav__link ${location.pathname === '/' ? 'active' : ''}`}
                  onClick={() => setIsOpen(false)}
                >
                  <FaHome className="mobile-nav__icon" />
                  <span>Home</span>
                </Link>
              </li>
              <li className="mobile-nav__item">
                <Link 
                  to="/properties" 
                  className={`mobile-nav__link ${location.pathname.startsWith('/properties') ? 'active' : ''}`}
                  onClick={() => setIsOpen(false)}
                >
                  <FaBuilding className="mobile-nav__icon" />
                  <span>Properties</span>
                </Link>
              </li>
              <li className="mobile-nav__item">
                <Link 
                  to="/hotels" 
                  className={`mobile-nav__link ${location.pathname.startsWith('/hotels') ? 'active' : ''}`}
                  onClick={() => setIsOpen(false)}
                >
                  <FaHotel className="mobile-nav__icon" />
                  <span>Hotels</span>
                </Link>
              </li>
              <li className="mobile-nav__item">
                <Link 
                  to="/blog" 
                  className={`mobile-nav__link ${location.pathname.startsWith('/blog') ? 'active' : ''}`}
                  onClick={() => setIsOpen(false)}
                >
                  <FaBlog className="mobile-nav__icon" />
                  <span>Blog</span>
                </Link>
              </li>
              
              {isAuthenticated ? (
                <>
                  <li className="mobile-nav__divider"></li>
                  <li className="mobile-nav__item">
                    <Link 
                      to="/dashboard" 
                      className="mobile-nav__link"
                      onClick={() => setIsOpen(false)}
                    >
                      <FaTachometerAlt className="mobile-nav__icon" />
                      <span>Dashboard</span>
                    </Link>
                  </li>
                  <li className="mobile-nav__item">
                    <Link 
                      to="/profile" 
                      className="mobile-nav__link"
                      onClick={() => setIsOpen(false)}
                    >
                      <FaUser className="mobile-nav__icon" />
                      <span>Profile</span>
                    </Link>
                  </li>
                  <li className="mobile-nav__item">
                    <Link 
                      to="/settings" 
                      className="mobile-nav__link"
                      onClick={() => setIsOpen(false)}
                    >
                      <FaUserCog className="mobile-nav__icon" />
                      <span>Settings</span>
                    </Link>
                  </li>
                  <li className="mobile-nav__divider"></li>
                  <li className="mobile-nav__item">
                    <button 
                      className="mobile-nav__link mobile-nav__link--logout"
                      onClick={handleLogout}
                    >
                      <FaSignOutAlt className="mobile-nav__icon" />
                      <span>Logout</span>
                    </button>
                  </li>
                </>
              ) : (
                <>
                  <li className="mobile-nav__divider"></li>
                  <li className="mobile-nav__item">
                    <Link 
                      to="/login" 
                      className="mobile-nav__button button button--outline"
                      state={{ from: location.pathname }}
                      onClick={() => setIsOpen(false)}
                    >
                      <FaSignInAlt className="button__icon" />
                      <span>Login</span>
                    </Link>
                  </li>
                  <li className="mobile-nav__item">
                    <Link 
                      to="/register" 
                      className="mobile-nav__button button button--primary"
                      state={{ from: location.pathname }}
                      onClick={() => setIsOpen(false)}
                    >
                      <FaUserPlus className="button__icon" />
                      <span>Sign Up</span>
                    </Link>
                  </li>
                </>
              )}
            </ul>
          </nav>
          
          <div className="mobile-footer">
            <p>&copy; {new Date().getFullYear()} Shiats3. All rights reserved.</p>
          </div>
        </div>
      </nav>
    </div>
  );
};

export default Navbar;
